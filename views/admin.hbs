<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">

	<!-- Boxicons -->
	<link href='https://unpkg.com/boxicons@2.0.9/css/boxicons.min.css' rel='stylesheet'>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
	<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
	<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
	<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<!-- My CSS -->
	<title>AdminMangaLand</title>
	
</head>

<body>


	<!-- SIDEBAR -->
	<section id="sidebar">
		<a href="" class="brand">
			<i class='bx bxs-smile'></i>
			<span class="text">AdminMangaLand</span>
		</a>
		<ul class="side-menu top">
			<li class="active">
				<a href="">
					<i class='bx bxs-dashboard'></i>
					<span class="text">Dashboard</span>
				</a>
			</li>
			<li>
				<a href="" id="userManagerLink">
					<i class='bx bxs-user'></i>
					<span class="text">User Management</span>
				</a>
			</li>
			<li>
				<a href="" id="categoryManagerLink">
					<i class='bx bxs-category'></i>
					<span class="text">Category Manager</span>
				</a>
			</li>
			<li>
				<a id="mangaManagerLink" href="">
					<i class='bx bxs-book-bookmark'></i>
					<span class="text">Manga Manager</span>
				</a>
			</li>
			<li>
				<a id="chapterManagerLink" href="">
					<i class='bx bx bxs-file'></i>
					<span class="text">Chapter Manager</span>
				</a>
			</li>
			<li>
				<a href="" id="revenueManagerLink">
					<i class='bx bxs-dollar-circle'></i>
					<span class="text">Revenue Management</span>
				</a>
			</li>

		</ul>
		<ul class="side-menu">
			<li>
				<a href="">
					<i class='bx bxs-cog'></i>
					<span class="text">Settings</span>
				</a>
			</li>
			<li>
				<a href="/logout" class="logout">
					<i class='bx bxs-log-out-circle'></i>
					<span class="text">Logout</span>
				</a>
			</li>
		</ul>
	</section>
	<!-- SIDEBAR -->



	<!-- CONTENT -->
	<section id="content">
		<!-- NAVBAR -->
		<nav>
			<i class='bx bx-menu'></i>
			<a href="" class="nav-link">Manager</a>
			<form action="">
				<div class="form-input">
					<input type="search" placeholder="Search...">
					<button type="submit" class="search-btn"><i class='bx bx-search'></i></button>
				</div>
			</form>
			<input type="checkbox" id="switch-mode" hidden>
			<label for="switch-mode" class="switch-mode"></label>
			<a href="" id="notification" class="notification">
				<i class='bx bxs-bell'></i>
				<span class="num">8</span>
			</a>
			<a href="#" class="profile">
				<img src="https://lmhoptacxatthue.com.vn/wp-content/uploads/2023/05/anh-con-cho-ngao-10.jpg">
			</a>
		</nav>
		<!-- NAVBAR -->

		<!-- MAIN -->
		<main id="main-content">
			<div class="head-title">
				<div class="left">
					<h1>Dashboard</h1>
					<ul class="breadcrumb">
						<li>
							<a href="">Dashboard</a>
						</li>
						<li><i class='bx bx-chevron-right'></i></li>
						<li>
							<a class="active" href="#">Home</a>
						</li>
					</ul>
				</div>
			</div>

			<ul class="box-info">
				<li>
					<i class='bx bxs-calendar-check'></i>
					<span class="text">
						<h3>1020</h3>
						<p>New Order</p>
					</span>
				</li>
				<li>
					<i class='bx bxs-group'></i>
					<span class="text">
						<h3>2834</h3>
						<p>Visitors</p>
					</span>
				</li>
				<li>
					<i class='bx bxs-dollar-circle'></i>
					<span class="text">
						<h3>$2543</h3>
						<p>Total Sales</p>
					</span>
				</li>
			</ul>


			<div class="table-data">
				<div class="order">
					<div class="head">
						<h3>Top5</h3>
						<i class='bx bx-search'></i>
						<i class='bx bx-filter'></i>
					</div>
					<table>
						<thead>
							<tr>
								<th>Image</th>
								<th>Manganame</th>
								<th>Author</th>
								<th>View</th>
							</tr>
						</thead>
						<tbody id="manga-list">

						</tbody>
					</table>
				</div>
				<div class="todo">
					<div class="head">
						<h3>Todos</h3>
						<i class='bx bx-plus'></i>
						<i class='bx bx-filter'></i>
					</div>
					<ul class="todo-list">
						<li class="completed">
							<p>Todo List</p>
							<i class='bx bx-dots-vertical-rounded'></i>
						</li>
						<li class="completed">
							<p>Todo List</p>
							<i class='bx bx-dots-vertical-rounded'></i>
						</li>
						<li class="not-completed">
							<p>Todo List</p>
							<i class='bx bx-dots-vertical-rounded'></i>
						</li>
						<li class="completed">
							<p>Todo List</p>
							<i class='bx bx-dots-vertical-rounded'></i>
						</li>
						<li class="not-completed">
							<p>Todo List</p>
							<i class='bx bx-dots-vertical-rounded'></i>
						</li>
					</ul>
				</div>
			</div>
		</main>
		<!-- MAIN -->
	</section>
	<!-- CONTENT -->
	<script>
		const allSideMenu = document.querySelectorAll('#sidebar .side-menu.top li a');

		allSideMenu.forEach(item => {
			const li = item.parentElement;

			item.addEventListener('click', function () {
				allSideMenu.forEach(i => {
					i.parentElement.classList.remove('active');
				})
				li.classList.add('active');
			})
		});

		const menuBar = document.querySelector('#content nav .bx.bx-menu');
		const sidebar = document.getElementById('sidebar');

		menuBar.addEventListener('click', function () {
			sidebar.classList.toggle('hide');
		})

		const searchButton = document.querySelector('#content nav form .form-input button');
		const searchButtonIcon = document.querySelector('#content nav form .form-input button .bx');
		const searchForm = document.querySelector('#content nav form');

		searchButton.addEventListener('click', function (e) {
			if (window.innerWidth < 576) {
				e.preventDefault();
				searchForm.classList.toggle('show');
				if (searchForm.classList.contains('show')) {
					searchButtonIcon.classList.replace('bx-search', 'bx-x');
				} else {
					searchButtonIcon.classList.replace('bx-x', 'bx-search');
				}
			}
		})

		if (window.innerWidth < 768) {
			sidebar.classList.add('hide');
		} else if (window.innerWidth > 576) {
			searchButtonIcon.classList.replace('bx-x', 'bx-search');
			searchForm.classList.remove('show');
		}


		window.addEventListener('resize', function () {
			if (this.innerWidth > 576) {
				searchButtonIcon.classList.replace('bx-x', 'bx-search');
				searchForm.classList.remove('show');
			}
		})

		const switchMode = document.getElementById('switch-mode');

		switchMode.addEventListener('change', function () {
			if (this.checked) {
				document.body.classList.add('dark');
			} else {
				document.body.classList.remove('dark');
			}
		})

		fetch('/top5manga')
			.then(response => response.json())
			.then(data => {
				const tbody = document.getElementById('manga-list');

				// Xóa dữ liệu cũ trong tbody
				tbody.innerHTML = '';

				// Thêm dữ liệu mới từ API vào tbody
				data.forEach(manga => {
					const row = `<tr>
                                <td>
                                <img src="${manga.image}" alt="Manga Image">
                                </td>
                                <td>${manga.manganame}</td>
                                <td>${manga.author}</td>
                                <td>${manga.view}</td>
                            </tr>`;
					tbody.innerHTML += row;
				});
			})
			.catch(error => console.error('Đã xảy ra lỗi:', error));

		const mangaManagerLink = document.getElementById('mangaManagerLink');

		mangaManagerLink.addEventListener("click", function (event) {
			event.preventDefault();
			fetch('/mangass')
				.then(response => response.text())
				.then(data => {
					const mainContent = document.querySelector("#content main");
					mainContent.innerHTML = data;
				})
				.catch(error => console.error('Đã xảy ra lỗi:', error));
		});

		const chapterManagerLink = document.getElementById('chapterManagerLink');

		chapterManagerLink.addEventListener("click", function (event) {
			event.preventDefault();
			fetch('/getchap')
				.then(response => response.text())
				.then(data => {
					const mainContent = document.querySelector("#content main");
					mainContent.innerHTML = data;
					setupChapterPage();
				})
				.catch(error => console.error('Đã xảy ra lỗi:', error));
		});


		function setupChapterPage() {
			const chapterDetailButtons = document.querySelectorAll('.detail-button');

			chapterDetailButtons.forEach(button => {
				button.addEventListener('click', function (event) {
					const chapterId = this.getAttribute('data-chapter-id');
					fetch(`/chapterchitiet/${chapterId}`)
						.then(response => response.json())
						.then(data => {
							if (data.length > 0) {
								const modalBody = document.querySelector('#image-modal .modal-body');
								modalBody.innerHTML = '';
								data.forEach(image => {
									const imgElement = document.createElement('img');
									imgElement.src = image;
									imgElement.style.width = '100px';
									imgElement.style.height = '100px';
									imgElement.style.margin = '5px';
									imgElement.style.objectFit = 'cover';
									modalBody.appendChild(imgElement);
								});
								$('#image-modal').modal('show');
							} else {
								alert('Chưa có ảnh cho chương này.');
							}
						})
						.catch(error => {
							console.error('Lỗi khi lấy dữ liệu ảnh:', error);
							alert('Đã xảy ra lỗi khi lấy dữ liệu ảnh.');
						});
				});
			});
		}

		const revenueManagerLink = document.getElementById('revenueManagerLink');

		revenueManagerLink.addEventListener("click", function (event) {
			event.preventDefault();
			fetch('/revenue')
				.then(response => response.json())
				.then(data => {
					const mainContent = document.querySelector("#content main");
					mainContent.innerHTML = data;
					updateChart();
					initializeChart()
				})
				.catch(error => console.error('Đã xảy ra lỗi:', error));
		});

	   const fetchRevenueData = async (startDate, endDate) => {
            const response = await fetch(`/getrevenue?startDate=${startDate}&endDate=${endDate}`);
            const data = await response.json();
            return data;
        };

        const updateChart = async () => {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            const data = await fetchRevenueData(startDate, endDate);

            const dates = data.map(item => item.date);
            const amounts = data.map(item => item.totalAmount);

            const ctx = document.getElementById('revenueChart').getContext('2d');
            const revenueChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: dates,
                    datasets: [{
                        label: 'Doanh thu',
                        data: amounts,
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        };

        const initializeChart = async () => {
            const data = await fetchRevenueData();
            const mainContent = document.querySelector("#reve");
            const revenueChartDiv = document.createElement('div');
            revenueChartDiv.classList.add('revenue-chart');
            revenueChartDiv.innerHTML = `<canvas id="revenueChart" width="800" height="400"></canvas>`;
            mainContent.innerHTML = '';
            mainContent.appendChild(revenueChartDiv);

            const dates = data.map(item => item.date);
            const amounts = data.map(item => item.totalAmount);
            createRevenueChart(dates, amounts);
        };

        const createRevenueChart = (dates, amounts) => {
            const ctx = document.getElementById('revenueChart').getContext('2d');
            const revenueChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: dates,
                    datasets: [{
                        label: 'Doanh thu',
                        data: amounts,
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        };

		const categoryManagerLink = document.getElementById('categoryManagerLink');

		categoryManagerLink.addEventListener("click", function (event) {
			event.preventDefault();
			fetch('/categoryscreen')
				.then(response => response.text())
				.then(data => {
					const mainContent = document.querySelector("#content main");
					mainContent.innerHTML = data;
					setcategory();
				})
				.catch(error => console.error('Đã xảy ra lỗi:', error));
		});

		function setcategory() {
			$(document).ready(function () {
				// Hiện dialog thêm thể loại khi bấm nút "Thêm thể loại"
				$("#addCategoryButton").click(function () {
					$("#addCategoryModal").modal("show");
				});

				// Hiện dialog sửa thể loại khi bấm nút "Edit" trong bảng danh sách thể loại
				$(".editCategoryButton").click(function () {
					// Lấy thông tin thể loại từ hàng bảng
					var categoryId = $(this).closest("tr").find("td:first").text();
					var categoryname = $(this).closest("tr").find("td:nth-child(2)").text();

					// Hiển thị thông tin thể loại trong modal sửa thể loại
					$("#editCategoryname").val(categoryname);

					// Đặt action của form sửa thể loại để gửi cập nhật đúng thể loại
					$("#editCategoryForm").attr("action", "/categoryput/" + categoryId);

					$("#editCategoryModal").modal("show");
				});

			});
		}
		const userManagerLink = document.getElementById('userManagerLink');
		userManagerLink.addEventListener("click", function (event) {
			event.preventDefault();
			fetch('/userscreen')
				.then(response => response.text())
				.then(data => {
					const mainContent = document.querySelector("#content main");
					mainContent.innerHTML = data;
					setuser();
				})
				.catch(error => console.error('Đã xảy ra lỗi:', error));
		});

		function setuser() {
			$(document).ready(function () {

				$("#addCategoryButton").click(function () {
					$("#addCategoryModal").modal("show");
				});


				$(".editCategoryButton").click(function () {

					var id = $(this).closest("tr").find("td:first").text();
					var username = $(this).closest("tr").find("td:nth-child(2)").text();
					var password = $(this).closest("tr").find("td:nth-child(3)").text();
					var role = $(this).closest("tr").find("td:nth-child(4)").text();

					$("#editusername").val(username);
					$("#editpassword").val(username);
					$("#editrole").val(role);


					$("#editCategoryForm").attr("action", "/userput/" + id);

					$("#editCategoryModal").modal("show");
				});

			});
		}

		const notificationManagerLink = document.getElementById('notification');
		notificationManagerLink.addEventListener("click", function (event) {
			event.preventDefault();
			fetch('/rendernotifi')
				.then(response => response.text())
				.then(data => {
					const mainContent = document.querySelector("#content main");
					mainContent.innerHTML = data;
					setupMangaPage()
					annut()
				})
				.catch(error => console.error('Đã xảy ra lỗi:', error));
		});


		fetch('/unread-count')
			.then(response => {
				if (!response.ok) {
					throw new Error(`HTTP error! Status: ${response.status}`);
				}
				return response.json();
			})
			.then(data => {
				// Cập nhật số lượng thông báo chưa đọc trong thẻ span
				const notificationSpan = document.querySelector('.num');
				notificationSpan.innerText = data.unreadCount.toString();
			})
			.catch(error => console.error(error));

		function setupMangaPage() {
			const mangaDetailButtons = document.querySelectorAll('.manga-detail-button');

			mangaDetailButtons.forEach(button => {
				button.addEventListener('click', function (event) {
					const mangaId = this.getAttribute('data-manga-id');
					fetch(`/manganotifi/${mangaId}`)
						.then(response => response.json())
						.then(data => {
							if (data) {
								// Hiển thị thông tin chi tiết truyện trong modal
								document.getElementById('mangaDetailImage').src = data.image;
								document.getElementById('mangaDetailContent').textContent = `Nội dung: ${data.content}`;
								document.getElementById('mangaDetailAuthor').textContent = `Tác giả: ${data.author}`;
								// Các trường thông tin khác nếu có
								// Kích hoạt modal
								$('#mangaDetailModal').modal('show');
							} else {
								alert('Không có thông tin chi tiết cho truyện này.');
							}
						})
						.catch(error => {
							console.error('Lỗi khi lấy chi tiết truyện:', error);
							alert('Đã xảy ra lỗi khi lấy chi tiết truyện.');
						});
				});
			});
		}
		function annut() {
			
				const approveMangaButtons = document.querySelectorAll('.approveMangaButton');
				const approveChapButtons = document.querySelectorAll('.approveChapButton');
				const titleCells = document.querySelectorAll('.titleCell');

				approveMangaButtons.forEach((button, index) => {
					const title = titleCells[index].textContent.trim();
					if (title === 'Chap cần duyệt') {
						button.style.display = 'none';
					}
				});

				approveChapButtons.forEach((button, index) => {
					const title = titleCells[index].textContent.trim();
					if (title === 'Truyện cần duyệt') {
						button.style.display = 'none';
					}
				});
			
		}

	</script>
</body>

</html>